import os
import json
import requests
import telebot
import time
from dotenv import load_dotenv
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

load_dotenv()



BOT_TOKEN = os.environ.get('BOT_TOKEN')
API_KEY = os.environ.get('API_KEY')

bot = telebot.TeleBot(BOT_TOKEN)

FAVORITES_FILE = 'favorites.json'

user_settings = {}  # user_id -> {'city': '–ú–æ—Å–∫–≤–∞'}

# =================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===================
def load_user_settings():
    global user_settings
    if os.path.exists('user_settings.json'):
        with open('user_settings.json', 'r', encoding='utf-8') as f:
            user_settings = json.load(f)

def save_user_settings():
    with open('user_settings.json', 'w', encoding='utf-8') as f:
        json.dump(user_settings, f, ensure_ascii=False)

load_user_settings()


def is_valid_city(city):
    url = "http://api.openweathermap.org/data/2.5/weather"
    params = {'q': city, 'appid': API_KEY}
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª–µ 'cod' –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ != '404'
        if data.get('cod') == 200:
            return True
        else:
            return False
    except:
        return False


def process_add_favorite(message):
    city = message.text.strip()
    if not is_valid_city(city):
        safe_send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    favs = load_favorites(message.from_user.id)
    if city in favs:
        bot.send_message(message.chat.id, f"{city} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.", reply_markup=main_menu())
    else:
        favs.append(city)
        save_favorites(message.from_user.id, favs)
        bot.send_message(message.chat.id, f"{city} –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ —Å–ø–∏—Å–æ–∫.", reply_markup=main_menu())

def remove_favorite(message):
    city = message.text.strip()
    favs = load_favorites(message.from_user.id)
    if city in favs:
        favs.remove(city)
        save_favorites(message.from_user.id, favs)
        safe_send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ '{city}' —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu())
    else:
        safe_send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.", reply_markup=main_menu())

def safe_send_message(chat_id, text, reply_markup=None):
    try:
        bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def load_favorites(user_id):
    try:
        if os.path.exists(FAVORITES_FILE):
            with open(FAVORITES_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data.get(str(user_id), [])
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")
        return []

def save_favorites(user_id, cities):
    try:
        if os.path.exists(FAVORITES_FILE):
            with open(FAVORITES_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            data = {}
        data[str(user_id)] = cities
        with open(FAVORITES_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")

def get_weather_by_coords(lat, lon):
    url = "http://api.openweathermap.org/data/2.5/weather"
    params = {'lat': lat, 'lon': lon, 'appid': API_KEY, 'units': 'metric', 'lang': 'ru'}
    try:
        response = requests.get(url, params=params, timeout=30)
        response.raise_for_status()
        data = response.json()
        return {
            'description': data['weather'][0]['description'].capitalize(),
            'temp': data['main']['temp'],
            'humidity': data['main']['humidity'],
            'wind_speed': data['wind']['speed']
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {e}")
        return None

def get_weather(city):
    url = "http://api.openweathermap.org/data/2.5/weather"
    params = {'q': city, 'appid': API_KEY, 'units': 'metric', 'lang': 'ru'}
    try:
        response = requests.get(url, params=params, timeout=30)
        response.raise_for_status()
        data = response.json()
        return {
            'description': data['weather'][0]['description'].capitalize(),
            'temp': data['main']['temp'],
            'humidity': data['main']['humidity'],
            'wind_speed': data['wind']['speed']
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

from datetime import datetime, timedelta

from datetime import datetime, timedelta

def get_structured_forecast(city):
    url = "http://api.openweathermap.org/data/2.5/forecast"
    params = {'q': city, 'appid': API_KEY, 'units': 'metric', 'lang': 'ru'}
    try:
        response = requests.get(url, params=params, timeout=30)
        response.raise_for_status()
        data = response.json()
        forecast_list = data['list']

        today = datetime.utcnow().date()
        days = [today + timedelta(days=i) for i in range(3)]

        forecast_by_day = {}
        for day in days:
            forecast_by_day[day] = {
                '—É—Ç—Ä–æ': None,
                '–¥–µ–Ω—å': None,
                '–≤–µ—á–µ—Ä': None,
                '–Ω–æ—á—å': None
            }

        time_slots = {
            '—É—Ç—Ä–æ': 6,
            '–¥–µ–Ω—å': 12,
            '–≤–µ—á–µ—Ä': 18,
            '–Ω–æ—á—å': 0
        }

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å —ç–º–æ–¥–∑–∏
        weather_emojis = {
            '—è—Å–Ω–æ': '‚òÄÔ∏è',
            '—Å–æ–ª–Ω–µ—á–Ω–æ': '‚òÄÔ∏è',
            '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': 'üå§Ô∏è',
            '–æ–±–ª–∞—á–Ω–æ ': '‚òÅÔ∏è',
            '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅÔ∏è',
            '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '‚õÖ',
            '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': 'üå•Ô∏è',
            '–¥–æ–∂–¥—å': 'üåßÔ∏è',
            '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': 'üå¶Ô∏è',
            '–¥–æ–∂–¥–ª–∏–≤–æ': 'üåßÔ∏è',
            '—Å–Ω–µ–≥': '‚ùÑÔ∏è',
            '—Å–Ω–µ–∂–Ω–æ': '‚ùÑÔ∏è',
            '—Ç—É–º–∞–Ω': 'üå´Ô∏è',
            '—Ç—É–º–∞–Ω–Ω–æ': 'üå´Ô∏è',
            '–≥—Ä–æ–∑–∞': 'üå©Ô∏è',
            '–±—É—Ä—è': 'üå¨Ô∏è',
            '–≤–µ—Ç—Ä–µ–Ω–Ω–æ': 'üí®',
        }

        for item in forecast_list:
            dt = datetime.utcfromtimestamp(item['dt'])
            date = dt.date()
            hour = dt.hour

            if date in forecast_by_day:
                for period, period_hour in time_slots.items():
                    if abs(hour - period_hour) <= 1:
                        slot = period
                        if forecast_by_day[date][slot] is None:
                            desc = item['weather'][0]['description'].lower()
                            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
                            emoji = ''
                            for key in weather_emojis:
                                if key in desc:
                                    emoji = weather_emojis[key]
                                    break
                            forecast_by_day[date][slot] = {
                                'dt_txt': dt.strftime('%d.%m'),
                                'description': item['weather'][0]['description'].capitalize(),
                                'temp': item['main']['temp'],
                                'emoji': emoji
                            }
                        break

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        emojis = {
            '—É—Ç—Ä–æ': 'üåÖ',
            '–¥–µ–Ω—å': '‚òÄÔ∏è',
            '–≤–µ—á–µ—Ä': 'üåá',
            '–Ω–æ—á—å': 'üåô'
        }

        forecast_text = ""
        for day in days:
            forecast_text += f"\nüìÖ {day.strftime('%d.%m')}:\n"
            for period in ['—É—Ç—Ä–æ', '–¥–µ–Ω—å', '–≤–µ—á–µ—Ä', '–Ω–æ—á—å']:
                info = forecast_by_day[day][period]
                emoji_time = emojis.get(period, '')
                if info:
                    weather_emoji = info.get('emoji', '')
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≥–æ–¥–Ω—ã–π —ç–º–æ–¥–∑–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                    forecast_text += f"{emoji_time} {period.capitalize()}: {info['description']} {weather_emoji}, {info['temp']}¬∞C\n"
                else:
                    forecast_text += f"{emoji_time} {period.capitalize()}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        return forecast_text

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
        return None
# =================== –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é ===================

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        KeyboardButton("üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ"),
        KeyboardButton("üåÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
    )
    markup.row(
        KeyboardButton("üåç –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"),
        KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    )
    markup.row(
        KeyboardButton("‚≠ê –ú–æ–∏ –ª—é–±–∏–º—ã–µ –≥–æ—Ä–æ–¥–∞"),
        KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")
    )
    markup.row(
        KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"),
        KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    )
    markup.row(
        KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    )
    return markup

# =================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===================

@bot.message_handler(commands=['start'])
def handle_start(message):
    safe_send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ø–æ–≥–æ–¥—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda m: m.text in ["üåç –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"])
def handle_location_request(message):
    safe_send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")
def handle_delete_favorite_prompt(message):
    favs = load_favorites(message.from_user.id)
    if not favs:
        safe_send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.", reply_markup=main_menu())
        return
    safe_send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö:")
    bot.register_next_step_handler(message, remove_favorite)
@bot.message_handler(func=lambda m: m.text == "üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ")
def handle_current_weather(message):
    user_id = message.from_user.id
    city = None
    if user_id in user_settings and 'city' in user_settings[user_id]:
        city = user_settings[user_id]['city']
    if city:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
        weather = get_weather(city)
        if weather:
            reply = (
                f"üåÜ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"üå§Ô∏è {weather['description']}\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['wind_speed']} –º/—Å"
            )
            safe_send_message(message.chat.id, reply, reply_markup=main_menu())
        else:
            safe_send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.", reply_markup=main_menu())
    else:
        safe_send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
        bot.register_next_step_handler(message, process_current_weather)
@bot.message_handler(content_types=['location'])
def handle_location(message):
    if message.location:
        lat = message.location.latitude
        lon = message.location.longitude
        weather = get_weather_by_coords(lat, lon)
        if weather:
            reply = (
                f"üåê –ü–æ–≥–æ–¥–∞ –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é:\n"
                f"üå§Ô∏è {weather['description']}\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['wind_speed']} –º/—Å"
            )
            safe_send_message(message.chat.id, reply, reply_markup=main_menu())
        else:
            safe_send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.", reply_markup=main_menu())
    else:
        safe_send_message(message.chat.id, "–ù–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –≥–µ–æ-–¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=main_menu())
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(message):
    user_id = message.from_user.id
    current_city = None
    if user_id in user_settings and 'city' in user_settings[user_id]:
        current_city = user_settings[user_id]['city']
        safe_send_message(
            message.chat.id,
            f"–¢–µ–∫—É—â–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {current_city}. –•–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=markup_change_city()
        )
    else:
        safe_send_message(
            message.chat.id,
            "–í—ã –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=None
        )
        bot.register_next_step_handler(message, save_user_city)
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

def markup_change_city():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(
        KeyboardButton("–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"),
        KeyboardButton("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π")
    )
    return markup

def save_user_city(message):
    city = message.text.strip()
    if not is_valid_city(city):
        safe_send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    user_id = message.from_user.id
    user_settings.setdefault(user_id, {})['city'] = city
    save_user_settings()
    safe_send_message(
        message.chat.id,
        f"–ì–æ—Ä–æ–¥ '{city}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.",
        reply_markup=main_menu()


    )

@bot.message_handler(func=lambda m: m.text in ["–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π"])
def handle_change_city_choice(message):
    choice = message.text
    if choice == "–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        safe_send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:"
        )
        bot.register_next_step_handler(message, save_user_city)
    else:
        safe_send_message(
            message.chat.id,
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É.",
            reply_markup=main_menu()
        )
@bot.message_handler(func=lambda m: True)
def handle_text(message):
    text = message.text.strip()

    if text == "üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ":
        safe_send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
        bot.register_next_step_handler(message, process_current_weather)

    elif text == "üåÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è":
        safe_send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
        bot.register_next_step_handler(message, process_forecast_request)

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
        help_text = (
            "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n"
            "- –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤–≤–µ–¥–∏—Ç–µ '–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ' –∏ –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n"
            "- –î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è –≤—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è' –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n"
            "- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ 'üåç –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏' –∏–ª–∏ 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é' –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–¥–∞–Ω–Ω—ã–º–∏.\n"
            "- –í –º–µ–Ω—é –µ—Å—Ç—å –æ–ø—Ü–∏–∏ '–ú–æ–∏ –ª—é–±–∏–º—ã–µ –≥–æ—Ä–æ–¥–∞' –∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'."
        )
        safe_send_message(message.chat.id, help_text, reply_markup=main_menu())

    elif text == "‚≠ê –ú–æ–∏ –ª—é–±–∏–º—ã–µ –≥–æ—Ä–æ–¥–∞":
        favs = load_favorites(message.from_user.id)
        if favs:
            reply = "–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –≥–æ—Ä–æ–¥–∞:\n" + "\n".join(favs)
        else:
            reply = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤."
        safe_send_message(message.chat.id, reply, reply_markup=main_menu())

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        safe_send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_add_favorite)

    elif text.startswith("/removefavorite"):
        parts = text.split(maxsplit=1)
        if len(parts) == 2:
            city_to_remove = parts[1]
            remove_favorite(message, city_to_remove)
        else:
            safe_send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /removefavorite <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    else:
        safe_send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π.", reply_markup=main_menu())
def process_current_weather(message):
    city = message.text.strip()
    weather = get_weather(city)
    if weather:
        reply = (
            f"üåÜ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå§Ô∏è {weather['description']}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
            f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['wind_speed']} –º/—Å"
        )
        safe_send_message(message.chat.id, reply, reply_markup=main_menu())
    else:
        safe_send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üåÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
def handle_forecast_on_start(message):
    user_id = message.from_user.id
    city = None
    if user_id in user_settings and 'city' in user_settings[user_id]:
        city = user_settings[user_id]['city']

    if city:
        forecast = get_structured_forecast(city)
        if forecast:
            reply = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è {city}:\n{forecast}"
            safe_send_message(message.chat.id, reply, reply_markup=main_menu())
        else:
            safe_send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.", reply_markup=main_menu())
    else:
        # –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
        safe_send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
        bot.register_next_step_handler(message, process_forecast_request)

def process_forecast_request(message):
    city = message.text.strip()
    forecast = get_structured_forecast(city)
    print("user_settings:", user_settings)
    print("–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥:", city)
    print("–ü—Ä–æ–≥–Ω–æ–∑:", forecast)
    if forecast:
        reply = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è {city}:\n{forecast}"
        safe_send_message(message.chat.id, reply, reply_markup=main_menu())
    else:
        safe_send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
# =================== –ó–∞–ø—É—Å–∫ ===================

if __name__ == '__main__':
    while True:
        try:
            bot.infinity_polling(timeout=60)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)

